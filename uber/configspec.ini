# All settings in the top-level of this config file automatically become
# attributes on the global "c" object.  So if you want to access the
# "contact_url" setting, you can just use the c.CONTACT_URL variable.

# Used to connect to our Postgres database.
sqlalchemy_url = string(default="postgresql://m13:m13@localhost:5432/m13")

# There are some features we want to turn on for development which might
# otherwise be turned off, such as pages which would normally only be enabled
# after a deadline or on-site.
dev_box = boolean(default=True)

# All dates/times in our code and emails will use this timezone.  This can be
# any timezone name recogized by the pytz module.
event_timezone = string(default="US/Eastern")

# These can be overridden to use Uber for other events.
# DO NOT override this mid-year because that will cause emails to be re-sent!
organization_name = string(default='MAGFest')
event_name = string(default='%(organization_name)s')
year = string(default='')

# These are used for web server configuration and for linking back to our
# pages in emails; these definitely needs to be overridden in production.
path = string(default="/magfest")
hostname = string(default="localhost")
url_root = string(default="http://localhost:8282")
url_base = string(default="%(url_root)s%(path)s")

# MAGFest requires a signed and notarized consent form for minors.  To turn on
# this message and associated automated emails, set this to the URL of your
# event's consent form.  Leave it unset to turn off this functionality.
consent_form_url = string(default="")

# This link appears in preregistration pages and in some emails.
code_of_conduct_url = string(default="http://magfest.org/codeofconduct")

# This link is to give users a generic way to contact your organization.
contact_url = string(default="")

# These are test values which are safe for everyone to use and safe to check
# into source control; Stripe specifically designs their test credentials with
# this purpose in mind.  You can enter any of Stripe's test credit card numbers
# and have them work, e.g. you can use the number 4242 4242 4242 4242 which will
# always be valid with any expiration date and security code.
stripe_secret_key = string(default="sk_test_CvvvyHs2XnU9giMYDCUnIpF4")
stripe_public_key = string(default="pk_test_t36jT3di98A0rnENDejBE1Vg")

# These lists are checked when attendeees preregister and sign up as volunteers.
# You should enter the full names including all common nicknames as separate
# entries, e.g. if you banned "John Smith" then you should make sure to also
# include "Jonathan Smith" and "Johnny Smith" in the list.
banned_attendees = string_list(default=list())
banned_staffers = string_list(default=list())

# There are a huge slew of behaviors which are different before and during the
# event.  For example, during the event the registration page actually lets
# admins check people in.  This switches between the "during the year" mode and
# the "on-site" mode.
at_the_con = boolean(default=False)

# This turns on a mix of features which are enabled during OR after the event
# and behaviors such as automated emails which are ONLY turned on afterwards.
post_con = boolean(default=False)

# When this is True, the only thing anyone can do is log in as a volunteer to
# view their shift schedule.  All other pages, including admin pages, will be
# disabled, with the idea being that the live database will be move to on-site
# and it would be a bad idea to keep a separate server running in parallel.
uber_shut_down = boolean(default=False)

# While true, the schedule is not visible to non-admins.  This is a bool and not
# a date because we've never really been able to predict when the schedule will
# be ready, so we just set this to false whenever it is.
hide_schedule = boolean(default=True)

# Set this to false if your event does not support group discounts.
groups_enabled = boolean(default=True)

# There are a few automated emails which are sent every week regarding things
# like duplicate registrations and unclaimed placeholder badges.  We usually
# turn these off early in the year but turn them on after awhile once people
# have had time to take care of them, but we may change that now that we've
# made this a weekly rather than a daily email.
check_placeholders = boolean(default=True)

# Hotel rooms may no longer be edited after this is True EXCEPT by admins with
# STAFF_ROOMS access, to limit the post-deadline changes.  There's a separate
# ROOM_DEADLINE option, which controls how long volunteers can request/decline
# room space.  The actual deadline after which it's too late for even admins
# to edit room information on the backend comes later, and is set manually
# since it typically varies and is not known exactly in advance, so we use
# this boolean instead of a date.
rooms_locked_in = boolean(default=False)

# Some events do not use badge numbers (or even necessarily badges, since they
# may just stamp your hand or give you a wristband or something).  Set this to
# indicate whether or not badges should ever get numbers.
numbered_badges = boolean(default=True)

# MAGFest has customized badges for Staff and Supporters.  This means that badge
# numbers have to be assigned in advance for those badge types, and new ones
# cannot be created after those badges have been ordered.  Make this an empty
# list to turn off these preassigned and customized badges.
preassigned_badge_types = string_list(default=list('staff_badge', 'supporter_badge'))

# Some badge types should not be transferable because of privilege (Guest badges) or
# access level (Staff badges). This lists which badge types can be transferred, if any.
transferable_badge_types = string_list(default=list('attendee_badge'))

# When transfering a badge, we need to persist certain attributes such as the original
# date someone preregistered and their badge type, but we need to reset most other
# things.  This is a list of what needs to be reset, which is configurable so that
# other events with custom fields can add fields.
untransferable_attrs = string_list(default=list('first_name','last_name','email','birthdate','zip_code','international','ec_phone','cellphone','interests','age_group','staffing','requested_depts'))

# Some departments don't use our shift system, so we don't want to email
# volunteers in those departments asking them to sign up for shifts.  Make this
# a list of department constants you want to be excluded from the shift system.
shiftless_depts = string_list(default=list())

# There are two separate deadlines for custom badges; the one after which it's
# too late for attendees to edit their custom badge submissions, and the one
# where it's too late for an admin to shift badge numbers on the backend.  The
# former is controlled by the PRINTED_BADGE_DEADLINE field, which is what we
# advertise in our emails and such.

# Once the shift option is set to False, custom badge numbers are never changed
# automatically.  This is a bool instead of a date since we don't usually
# know the cutoff in advance.
shift_custom_badges = boolean(default=True)

# Some events may want to store an exact birthdate for attendees. If this option
# is turned on, then all registration forms will display and collect the exact
# birthdate. Turning this off will simply display a drop-down selection of the age
# groups defined below.
collect_exact_birthdate = boolean(default=False)

# Certain events need attendees' full addresses - others will only want some
# information. If this is turned off, attendees are only asked for their zipcode,
# emergency contact number, and cellphone number.
collect_full_address = boolean(default=False)

# An event may or may not want attendees to volunteer through pre-reg - this controls
# the visibility of the volunteering checkbox.
# TODO: Replace this with a larger per-form visibility configuration for all special fields
volunteer_form_visible = boolean(default=False)

# We try to predict our tshirt needs, but sometimes we run out during the
# event.  Set this to True when that happens, and people receiving swag
# will automatically be added to the list of people who received all of
# their swag except a shirt, so we can contact them later.
out_of_shirts = boolean(default=False)

# The max number of tables a dealer can apply for.  Note that the admin
# interface allows you to give a dealer a higher number than this.
max_tables = integer(default=4)
# The max number of badges which a dealer may apply for.
max_dealers = integer(default=20)

# Number of badges necessary to qualify for the group discount.
min_group_size = integer(default=8)

# This is mostly relevant because we have dropdown lists of the number of
# badges, so we needed to pick an arbitrarily high number :)
max_group_size = integer(default=100)

# People often want to add badges to their group after they've registered.
# We don't usually want to let them do this 1 at a time (although there is
# a checkbox which turns this on for a group in the admin group form), so
# this is the minimum number of additional badges that the group has to buy
# to be able to add badges while still qualifying for the group discount.
min_group_addition = integer(default=5)

# This is NOT our attendance cap; this is merely the number of paid attendee
# and group registrations which we support.  In other words, we will only
# cut off preregistration once that sum meets this number no matter how
# many other registrations (Staff, Dealers, Guests, etc) are in the system.
max_badge_sales = integer(default=20000)

# If this is False, we won't display the "Want to Kick in Extra" stuff.
donations_enabled = boolean(default=True)

# Attendees kicking in extra can enter their own new "affiliate" or select
# from a list of all affiliates which have already been entered.  This is
# the list of the top affiliates from last year which we use to prepopulate
# that list so that it's not empty when preregistration first launches.
default_affiliates = string_list(default=list("Metroid Metal", "Protomen", "Game Grumps", "The Megas", "OC ReMix", "JonTron", "Steam Train", "ScrewAttack", "Retroware"))

warn_if_server_browser_time_mismatch = boolean(default=True)

# Turn SEND_EMAILS on and set our AWS keys to allow emails to be sent.  Note
# that if the DEV_BOX setting is True, emails will show up in the database as if
# they were sent (and those emails will be logged), but no emails will be sent
# except to the DEVELOPER_EMAIL address and to any "mailinator.com" address.  So
# this is safe to turn on even in development.
#
# When turning this on in production, you'll need to enable all of of the email
# addresses below which send emails (ADMIN_EMAIL, REGDESK_EMAIL, STAFF_EMAIL,
# MARKETPLACE_EMAIL, and PANELS_EMAIL) in your AWS account or else those emails
# will not be sent.
#
# DO NOT EVER check our AWS keys into source control!  If you want to actually
# send real emails to yourself and mailinator.com addresses in development, set
# these values in your development.ini file, which is NOT checked in.
#
send_emails = boolean(default=False)
aws_access_key = string(default="")
aws_secret_key = string(default="")

# Admin account emails such as password resets come from this address.
admin_email = string(default="BronyCon Registration <reg@bronycon.org>")

# Registration emails such as payment confirmations are sent from this address.
regdesk_email = string(default="BronyCon Registration <reg@bronycon.org>")

# Volunteer-related emails are sent from this address.
staff_email = string(default="BronyCon Registration <reg@bronycon.org>")

# Dealer-related emails are sent from this address.
marketplace_email = string(default="BronyCon Registration <reg@bronycon.org>")

# Emails to guests and panelists are sent from this address.
panels_email = string(default="BronyCon Registration <reg@bronycon.org>")

# These signatures are used at the bottom of many of our automated emails.
regdesk_email_signature = string
stops_email_signature = string
marketplace_email_signature = string
peglegs_email_signature = string
guest_email_signature = string

# This is the only non-"mailinator.com" address which a DEV box can send to.  No
# emails are sent from this address, so it doesn't need to be listed as a sender
# in your AWS account.
developer_email = string(default="eli@courtwright.org")

# In some of our pages and emails relating to hotel room nights, it makes sense
# to list the nights in order based on the start of the event rather than the
# first day of the week.
night_display_order = string_list(default=list("tuesday", "wednesday", "thursday", "friday", "saturday", "sunday", "monday"))

# These are all just constants which we happen to define here.  You can ignore
# these options and should probably never change or override them.
signups             = integer(default=1)  # not an admin access level, so handled separately
pseudo_group_badge  = integer(default=1)  # people registering in groups will get attendee badges
pseudo_dealer_badge = integer(default=2)  # dealers get attendee badges with a ribbon
email_re            = string(default="^[a-zA-Z0-9_\-+.]+@[a-zA-Z0-9_\-+.]+(\.[a-zA-Z0-9_\-+.]+){1,}$")
ind_dealer_badge = integer(default=3)  # individual dealers get attendee badges with a ribbon

# People occasionally refer to MAGFest as a "convention" and then someone such
# as Nick sends an email to correct them, saying that we're a "festival".  Other
# people have started doing this as well, so to mess with these people, I've
# implemented a feature that replaces "Fest" with "Con" just for them.
jerks = string_list(default=list('Nick Marinelli', 'Nicholas Marinelli', 'Matt Reid', 'Matthew Reid'))


[dates]
# Dates controlling when different site features and emails are turned on and off.  Features
# can be turned off by setting these values to the empty string.  For example, you can turn
# off Dealer registration completely by setting all of the dealer dates to the empty string.
#
# Settings in this section are automatically converted to global variable datetime objects,
# locatized to the timezone specified in the above EVENT_TIMEZONE setting.
#
# Events can add their own custom dates to this section and then refer to them in their
# email plugin, e.g. MAGFest has a MAGCON date.

# Prereg pages will automatically start letting people preregister on this day.
prereg_open = string(default="2014-08-08")

# You can create shifts anytime, but emails to volunteers to sign up for shifts will be sent
# on this date, and volunteers will not be able to log in until this date.  Leave this empty
# if you don't want to have shifts for your event.
shifts_created = string(default="")

# Dealer registration automatically opens on DEALER_REG_START.  After DEALER_REG_DEADLINE
# all dealer registration are automatically waitlisted.  After DEALER_REG_SHUTDOWN dealers
# can no longer even add themselves to the waitlist.  Dealer payment reminder emails are
# sent in the days and weeks leading up to DEALER_PAYMENT_DUE.  All waitlisted dealers will
# be emailed when the waitlist has been exhausted and all available positions have been
# filled, as defined by DEALER_WAITLIST_CLOSED.
#
# Leaving all of these blank will completely turn off dealer registration for your event.
#
dealer_reg_start       = string(default="")
dealer_reg_deadline    = string(default="")
dealer_reg_shutdown    = string(default="")
dealer_payment_due     = string(default="")
dealer_waitlist_closed = string(default="")

# This is ignored if Supporter registrations are turned off (which happens implicitly if
# the SUPPORTER_LEVEL value is higher than any of the donation tiers), but if Supporter
# registration is enabled, all donation tiers at SUPPORTER_LEVEL and higher can no longer
# be selected by attendees starting on this date.
supporter_deadline = string(default="")

# If printed badges are enabled (in other words, if PREASSIGNED_BADGE_TYPES is not an
# empty list), this is the date by which attendees must enter what they want printed
# on their badge; after this date we lock in whatever they entered or their full name
# if they didn't provide anything.
printed_badge_deadline = string(default="2015-12-26")

# Even after preregistration goes offline, we still allow groups to allocate their
# unassigned badges until this date.
group_prereg_takedown = string(default="2016-01-11")

# Even after preregistration goes offline, we still allow people with placeholder
# registrations to fill out the form to claim their badge until this date, after which
# we usually just delete the unclaimed badges (as our emails warn that we'll do),
# although this is a manual process.
placeholder_deadline  = string(default="2016-01-18")

# New preregistrations can no longer be made after this date, but all other features will
# continue to work, such as badge transfers, group management, and shift signup.
prereg_takedown = string(default="2016-01-18")

# All parts of the site go offline after this date (which is also used in several emails).
# Volunteers will be able to log in to check and print out their hours but will not be
# able to edit them after this happens.
uber_takedown = string(default="2016-01-21")

# Used to determine whether or not hotel room requests appear on the volunteer
# checklist.  Leave this blank to stop it from ever appearing.
room_deadline = string(default="")

epoch    = string(default="2016-01-23 08")
eschaton = string(default="2016-01-26 18")

__many__ = string


[badge_prices]
# These settings (but not in subsections) are also exported as global constants.

# Set this to False to turn off single-day passes for your event.
one_days_enabled = boolean(default=True)

# We support different single day badge prices on different days.  This is the
# default price, which may be overridden in the [[single_day]] section below.
default_single_day = integer(default=40)

# Our attendee price starts at this amount, and then goes up on all of the dates
# you specify in the [[attendee]] section below.
initial_attendee = integer(default=40)

# Set this to False to turn off price increases over time and just always have
# your attendee badges cost the INITIAL_ATTENDEE price specified above.
price_bumps_enabled = boolean(default=True)

# Group badge prices always equal the attendee badge prices minus this discount.
group_discount = integer(default=10)

# Dealer badge prices always cost this amount and don't change over time.
dealer_badge_price = integer(default=30)

[[single_day]]
# Set (capitalized) day names equal to their overriden prices in this section.
# For example, you could say "Thursday = 20" to make Thursday single-day badges
# only cost 20, overridding the the DEFAULT_SINGLE_DAY price above.
__many__ = integer

[[attendee]]
# Set dates equal to the price as of that date.  For example, you could say
# "2014-10-01 = 45" to have the price go up to $45 on October 1st.
__many__ = integer


[table_prices]
default_price = integer(default=100)
__many__ = integer


[badge_ranges]
# Set each badge type to the min and max badge numbers for those badges.  For
# example, you'd say "attendee = 1, 1000" to indicate that attendee badge
# numbers start at 1 and end at 1000.
__many__ = int_list(min=2, max=2)


[age_groups]

[[age_unknown]]
desc            = string(default="age unknown")
wristband_color = string(default="")
discount        = integer(default=0)
can_register    = boolean(default=True)
can_volunteer   = boolean(default=True)
consent_form    = boolean(default=False)

[[__many__]]
desc            = string
min_age         = integer
max_age         = integer
wristband_color = string(default="")
discount        = integer(default=0)
can_register    = boolean(default=True)
can_volunteer   = boolean(default=True)
consent_form    = boolean(default=False)


[season_events]
[[__many__]]
name = string(default="")      # defaults to title-ized section name
day = string(default="")
deadline = string(default="")  # defaults to 7 days before the event
location = string(default="")
url = string(default="")


[integer_enums]
shirt_level     = integer(default=20)
supporter_level = integer(default=60)
season_level    = integer(default=160)
__many__ = integer

[[___many___]]
__many__ = string


[enums]
# This section is for defining option sets which are used for dropdowns and
# checkbox groups.  Every sub-section will be turned into two global constants;
# a list of key/value tuples and a dictionary.  The former will have the "opts"
# suffix and the latter will have an "s" appended if it doesn't already end with
# one.  For example, the [[badges]] subsection will generate a BADGE_OPTS list
# and a BADGES dictionary, and the [[access]] subsection will generate SUCCESS
# and SUCCESS_OPTS, etc.
#
# All of the options in each subsection will become integer global contants
# which will be the values used to store these fields in the database and to
# otherwise identify these values in the code.  The string values are used for
# displaying these values to users; see the {% options %} tag and the _label
# properties for how to use these.
#
# Some of the subsections have values defined here, because it would break our
# code to have any of their options removed.  For example, we MUST have an
# ATTENDEE_BADGE option, though you can override the display text.  You can
# also add new option to those sections, e.g. new badge types and ribbons.

[[badge]]
attendee_badge  = string(default="Attendee")
supporter_badge = string(default="Supporter")
staff_badge     = string(default="Staff")
guest_badge     = string(default="Guest")
one_day_badge   = string(default="One Day")
__many__ = string

[[ribbon]]
no_ribbon        = string(default="no ribbon")
volunteer_ribbon = string(default="Volunteer")
dept_head_ribbon = string(default="Department Head")
dealer_ribbon    = string(default="Shopkeep")
panelist_ribbon  = string(default="Panelist")
__many__ = string

[[payment]]
not_paid      = string(default="no")
has_paid      = string(default="yes")
need_not_pay  = string(default="doesn't need to")
refunded      = string(default="paid and refunded")
paid_by_group = string(default="paid by group")
lost_badge    = string(default="lost badge")
__many__ = string

[[access]]
accounts    = string(default="Account Management")
people      = string(default="Registration and Staffing")
stuff       = string(default="Inventory and Scheduling")
money       = string(default="Budget")
checkins    = string(default="Checkins")
stats       = string(default="Analytics")
staff_rooms = string(default="(STOPS-only) Staff Rooms")
reg_at_con  = string(default="Registration At-Con")
__many__ = string

[[worked_status]]
shift_unmarked = string(default="SELECT A STATUS")
shift_worked   = string(default="This shift was worked")
shift_unworked = string(default="Staffer didn"t show up")

[[rating]]
unrated     = string(default="Shift Unrated")
rated_bad   = string(default="Staffer performed poorly")
rated_good  = string(default="Staffer performed well")
rated_great = string(default="Staffer went above and beyond")

[[wristband_color]]
default_wristband = string(default="red")
__many__ = string

[[tracking]]
created = string(default="created")
updated = string(default="updated")
deleted = string(default="deleted")
unpaid_prereg = string(default="unpaid preregistration")
edited_prereg = string(default="edited_unpaid_prereg")
auto_badge_shift = string(default="automatic badge-shift")
page_viewed = string(default='pageview')

[[food_restriction]]
vegetarian = string(default="Vegetarian")
vegan      = string(default="Vegan")
gluten     = string(default="No gluten")
dairy      = string(default="No Dairy")
pork       = string(default="No Pork")

[[sandwich]]
turkey = string(default="Turkey")
ham    = string(default="Ham")
pbj    = string(default="Peanut Butter and Jelly")

[[dealer_status]]
unapproved = string(default="Pending Approval")
waitlisted = string(default="Waitlisted")
approved   = string(default="Approved")

[[night]]
monday    = string(default="Monday")
tuesday   = string(default="Tuesday")
wednesday = string(default="Wednesday")
thursday  = string(default="Thursday")
friday    = string(default="Friday")
saturday  = string(default="Saturday")
sunday    = string(default="Sunday")

[[job_type]]
regular  = string(default="Regular")
setup    = string(default="Setup")
teardown = string(default="Teardown")

# These sections need to exist but can stay empty for events which are not using
# the features they represent.
[[sale]]
[[payment_method]]
[[fee_payment_method]]
[[new_reg_payment_method]]
[[door_payment_method]]
[[noise_level]]
[[shirt_color]]
[[event_location]]
[[interest]]
[[job_interest]]
[[job_location]]
[[dept_head_overrides]]

[[__many__]]
__many__ = string


[dept_checklist]
[[__many__]]
deadline = string
description = string
name = string(default="")
path = string(default="")


[django]
# These settings are passed to django.settings.configure()
DEBUG = boolean(default=True)
TEMPLATE_DEBUG = boolean(default=True)
TEMPLATE_DIRS = string_list(default=list('%(module_root)s/templates'))


[appconf]
# This is all CherryPy configuration.

#[[/]]
#tools.proxy.on = boolean(default=True)
#tools.proxy.base = string(default="%(url_root)s")
#tools.add_email_to_error_page.on = boolean(default=True)
